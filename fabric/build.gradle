plugins {
    id "com.github.johnrengelman.shadow" version "8.1.1"
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

architectury {
    fabric()
}

def generatedResources = file("src/generated/resources")
def accessWidenerFile = project(":common").file("src/main/resources/adaptedmobs.accesswidener")

sourceSets.main.resources.srcDirs += project(":common").file(project.output_datagen)

sourceSets {
    datagen {
        compileClasspath += main.compileClasspath
        runtimeClasspath += main.runtimeClasspath
    }
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }

    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"
    modApi "flatDir:Platform-fabric-1.19.2-1.2.0"

    modImplementation "com.terraformersmc:modmenu:${rootProject.mod_menu_version}"
    modApi ("me.shedaniel.cloth:cloth-config-fabric:${rootProject.cloth_config_version}") { exclude(group: "net.fabricmc.fabric-api") }
    include ("me.shedaniel.cloth:cloth-config-fabric:${rootProject.cloth_config_version}")

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowBundle(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
}

loom {
    accessWidenerPath.set(accessWidenerFile)

    runs {
        datagen {
            name "Data Generation"

            server()
            source sourceSets.datagen

            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${project(":common").file(project.output_datagen)}"

            runDir "build/datagen"
        }
    }
}

task copyAccessWidener(type: Copy) {
    from(accessWidenerFile)
    into(generatedResources)
}

processResources {
    dependsOn(copyAccessWidener)

    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    inputFile.set(shadowJar.archiveFile)
    dependsOn shadowJar
    archiveClassifier = null
}

configurations.configureEach {
    resolutionStrategy {
        force("net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}")
    }
}